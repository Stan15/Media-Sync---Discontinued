import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:sliding_up_panel/sliding_up_panel.dart';
import 'package:directory_picker/directory_picker.dart';
import 'dart:io';
import 'package:path_provider/path_provider.dart';

void main() => runApp(MaterialApp(
    home: MyApp(),
  )
);


bool isProgressing = false;
double progressValue = .1;
String progressMessage = 'Downloading \"Sample.mp3\"';
bool findingUnsyncedFiles = false;
int unsyncedCount = 5;


Directory audioDestination;
Directory videoDestination;
Future<void> setDefaultDownloadDestinations({bool audio, bool video}) async {
  String audioSubPath = '/MediaSync/Audios/';
  String videoSubPath = '/MediaSync/Videos/';
  if (!audio && !video) {return null;}

  List<String> subPathList = [];
  if (audio) {
    final Directory _rootDir = await getExternalStorageDirectory();
    final Directory _fileSaveFolder =  Directory('${_rootDir.path}$audioSubPath');

    Directory directory;
    if(await _fileSaveFolder.exists()){ //if folder already exists return directory
      directory =  _fileSaveFolder;
    }else{//if folder not exists create folder and then return directory
      final Directory _fileDirNewFolder=await _fileSaveFolder.create(recursive: true);
      directory = _fileDirNewFolder;
    }
    setAudioDestination(directory);
  }
  if (video) {
    final Directory _rootDir = await getExternalStorageDirectory();
    final Directory _fileSaveFolder =  Directory('${_rootDir.path}$videoSubPath');

    Directory directory;
    if(await _fileSaveFolder.exists()){ //if folder already exists return directory
      directory =  _fileSaveFolder;
    }else{//if folder not exists create folder and then return directory
      final Directory _fileDirNewFolder=await _fileSaveFolder.create(recursive: true);
      directory = _fileDirNewFolder;
    }
    setVideoDestination(directory);
  }
  return null;
}

void setAudioDestination(Directory directory) {
  audioDestination = directory;
}

void setVideoDestination(Directory directory) {
  videoDestination = directory;
}

Directory getAudioDestination() {
  return audioDestination;
}

Directory getVideoDestination() {
  return videoDestination;
}

bool urlVerify({String url, String restrict}) {
  if (restrict == null) {
    return url.trim().isNotEmpty && url!=null;
  }else {
    if (restrict=='playlist') {
      bool isPlaylist = true;
      return url.trim().isNotEmpty && url!=null && isPlaylist;
    }else if (restrict=='video') {
      bool isVideo = true;
      return url.trim().isNotEmpty && url!=null && isVideo;
    }
  }
}

class UserData {
  int plistLimit = 4;
  bool syncAudio = true;
  bool syncVideo = false;
  List<String> playlists = [];

  bool getSyncAudio() {
    return this.syncAudio;
  }

  bool getSyncVideo() {
    return this.syncVideo;
  }

  void setSyncAudio(bool) {
    this.syncAudio = bool;
  }

  void setSyncVideo(bool) {
    this.syncVideo = bool;
  }

  List<String> getPlaylists() {
    return this.playlists;
  }

  void addPlaylist(url) {
    this.playlists.add(url);
  }

  void removePlaylist(url) {
    this.playlists.remove(url);
  }


  String selectFolder() {
    return 'wvbjdn';
  }
}

void SyncData(usrData) {
  isProgressing = !isProgressing;
  findingUnsyncedFiles = !findingUnsyncedFiles;
}

void DownloadMedia({String url, String format}) {
  print(format + ' - ' + url);
  isProgressing = true;
  findingUnsyncedFiles = true;
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      extendBodyBehindAppBar: true,
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0.0,
      ),
      body: MediaSyncApp(),
    );
  }
}

class MediaSyncApp extends StatefulWidget {
  @override
  _MediaSyncAppState createState() => _MediaSyncAppState();
}

class _MediaSyncAppState extends State<MediaSyncApp> with TickerProviderStateMixin{

  var usrData = UserData();
  double settingsColPadding = 10;
  double settingsRowPadding = 20;
  double textFieldSize = 40;

  @override
  void initState() {
    super.initState();
    setState(() {
      ensureFolderDestination();
    });
  }
  void ensureFolderDestination() async{
    if (audioDestination==null || !(await audioDestination.exists())) {
      setDefaultDownloadDestinations(audio: true,video:false);
      print('hi');
    }
    if (videoDestination==null || !(await videoDestination.exists())) {
      setDefaultDownloadDestinations(video: true,audio: false);
    }
  }

  Future<String> createAddPlaylistAlertDialog(BuildContext context) {
    TextEditingController customController = TextEditingController();

    return showDialog(context: context, builder: (context) {
      return AlertDialog(
        title: Text('Enter playlist link'),
        content: TextField(
          controller: customController,
        ),
        actions: <Widget>[
          MaterialButton(
            elevation: 5.0,
            child: Text('Submit'),
            onPressed: () {
              Navigator.of(context).pop(customController.text.toString());
            },
          ),
        ],
      );
    });
  }

  Future<String> createDownloadAlertDialog(BuildContext context) {
    TextEditingController customController = TextEditingController();

    return showDialog(context: context, builder: (context) {
      return AlertDialog(
        title: Text('Enter video or playlist link'),
        content: TextField(
          controller: customController,
        ),
        actions: <Widget>[
          MaterialButton(
            elevation: 5.0,
            child: Text('Download Audio'),
            onPressed: () {
              Navigator.of(context).pop('a '+customController.text.toString());
            },
          ),
          MaterialButton(
            elevation: 5.0,
            child: Text('Download Video'),
            onPressed: () {
              Navigator.of(context).pop('v '+customController.text.toString());
            },
          ),
        ],
      );
    });
  }

  Directory selectedDirectory;

  Future<Directory> _pickDirectory(BuildContext context) async {
    Directory directory = selectedDirectory;
    if (directory == null) {
      directory = await getExternalStorageDirectory();
      print(await getExternalStorageDirectory());
      print('hi');
    }

    return await DirectoryPicker.pick(
        allowFolderCreation: true,
        context: context,
        rootDirectory: directory,
        shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.all(Radius.circular(10))));
  }

  @override
  Widget build(BuildContext context) {
    List<String> usrPlaylists = usrData.getPlaylists();
    return SlidingUpPanel(
      maxHeight: 0.85*MediaQuery.of(context).size.height,
      minHeight: 70,
      parallaxEnabled: false,
      parallaxOffset: .5,
      borderRadius: BorderRadius.only(topLeft: Radius.circular(10.0), topRight: Radius.circular(10.0)),
      body: Stack(
        children: <Widget>[
          Container(
            color: Colors.white,
            child: Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                crossAxisAlignment: CrossAxisAlignment.center,
                children: <Widget>[
                  Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Container(
                        decoration: BoxDecoration(
                          color: Colors.white,
                          borderRadius: BorderRadius.circular(500),
                          boxShadow: [
                            BoxShadow(
                              color: Color.fromRGBO(0, 0, 0, .23),
                              offset: Offset(0, 0),
                              blurRadius: 6.0,
                            ),
                          ],
                        ),
                        padding: EdgeInsets.all(8),
                        child: Row(
                          children: <Widget>[
                            AnimatedContainer(
                              height: 35,
                              width: 35,
                              duration: Duration(milliseconds: 300),
                              decoration: BoxDecoration(
                                  color: findingUnsyncedFiles ? Colors.blueAccent: unsyncedCount!=0 ? Colors.redAccent : Colors.greenAccent,
                                  borderRadius: BorderRadius.circular(500.0)
                              ),
                              child: AnimatedSwitcher(
                                duration: Duration(milliseconds: 300),
                                child: findingUnsyncedFiles ? Icon(
                                  Icons.refresh,
                                  size: 25,
                                  color: Colors.white,
                                ) : Center(child: Text(
                                  unsyncedCount.toString(),
                                  style: TextStyle(
                                    color: Colors.white,
                                    fontWeight: FontWeight.bold,
                                    fontSize: 17,
                                  ),
                                )),
                              ),
                            ),

                            AnimatedSize(
                              duration: Duration(milliseconds: 400),
                              vsync: this,
                              child: findingUnsyncedFiles ? Container() : Padding(
                                padding: const EdgeInsets.all(8.0),
                                child: Text(unsyncedCount.toString() + ' unsynced files'),
                              ),
                            )
                          ],
                        ),
                      ),
                    ],
                  ),
                  SizedBox(height: 50),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: <Widget>[
                      RaisedButton(
                        onPressed: () {
                          setState(() {
                            SyncData(usrData);
                          });
                        },
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(10.0),
                        ),
                        child: Text(
                          'Sync',
                          style: TextStyle(
                            color: Colors.white,
                          ),
                        ),
                        color: Colors.blueAccent,
                      ),
                      SizedBox(width: 50),
                      RaisedButton(
                        onPressed: () {
                          createDownloadAlertDialog(context).then((link) {
                            String format =  link.substring(0,2).trim();
                            link = link.substring(2).trim();
                            if (urlVerify(url:link)) {
                              if (format=='a') {
                                DownloadMedia(url: link, format: 'audio');
                              }
                              else if(format=='v') {
                                DownloadMedia(url: link, format: 'video');
                              }
                            }
                          });
                        },
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(10.0),
                        ),
                        child: Text(
                          'Download',
                          style: TextStyle(
                            color: Colors.white,
                          ),
                        ),
                        color: Colors.blueAccent,
                      ),
                    ],
                  ),
                  SizedBox(height: 25),
                  AnimatedSize(
                    duration: Duration(milliseconds: 400),
                    vsync: this,
                    child: Container(
                      padding: EdgeInsets.all(15),
                      height: isProgressing ? null : 0.0,
                      width: 300,
                      decoration: BoxDecoration(
                        color: Colors.white,
                        border: Border.all(
                          width: 1,
                          color: Color.fromRGBO(223, 223, 223, 1),
                        ),
                        borderRadius: BorderRadius.all(Radius.circular(10)),
                      ),
                      child: Column(
                        mainAxisAlignment: MainAxisAlignment.start,
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: <Widget>[
                          Text(
                            'Progress',
                            style: TextStyle(
                              fontWeight: FontWeight.w600,
                              color: Color.fromRGBO(100, 100, 100, 1),
                              fontSize: 20,
                            ),
                          ),
                          SizedBox(height: 5),
                          Row(
                            children: <Widget>[
                              Icon(
                                Icons.file_download,
                                color: Color.fromRGBO(0, 0, 0, 0.4),
                                size: 13,
                              ),
                              Text(
                                progressMessage,
                                style: TextStyle(
                                  color: Color.fromRGBO(0, 0, 0, 0.4),
                                  fontWeight: FontWeight.bold,
                                  fontSize: 12,
                                ),
                              ),
                            ],
                          ),
                          SizedBox(height: 30),
                          LinearProgressIndicator(
                            value: progressValue,
                          )
                        ],
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
          Align(
            alignment: Alignment.topLeft,
            child: Padding(
              padding: const EdgeInsets.symmetric(vertical: 40.0,horizontal: 20.0),
              child: Text(
                'Media Sync',
                style: TextStyle(
                  fontSize: 35,
                  fontWeight: FontWeight.w600,
                ),
              ),
            ),
          ),
        ]
      ),
      header: Column(
        children: [
          Container(
            width: MediaQuery.of(context).size.width,
            height: 70,
            padding: EdgeInsets.all(15),
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.only(topLeft: Radius.circular(10.0), topRight: Radius.circular(10.0)),
            ),
            child: Column(
              children: <Widget>[
                Center(child: Container(
                  height: 5,
                  width: 20,
                  decoration: BoxDecoration(
                    color: Color.fromRGBO(223, 223, 223, 1),
                    borderRadius: BorderRadius.circular(500),
                  ),
                )),
                SizedBox(height: 3),
                Align(
                  alignment: Alignment.center,
                  child: Text(
                    'Settings',
                    style: TextStyle(
                      fontSize: 25,
                      fontWeight: FontWeight.bold,
                      color: Colors.black,
                    ),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
      panelBuilder: (ScrollController scrollController) => SingleChildScrollView(
        controller: scrollController,
        child: Container(
          width: MediaQuery.of(context).size.width,
          padding: EdgeInsets.all(20),
          child: Column(
            children: <Widget>[
              SizedBox(height: 45),
              Divider(thickness: 1),
              ListTile(
                title: Text(
                  'Sync Audio',
                  style: TextStyle(
                    fontSize: 15,
                    fontWeight: FontWeight.normal,
                    color: Color.fromRGBO(10,10,10,1),
                  ),
                ),
                trailing: Switch(
                  value: usrData.getSyncAudio(),
                  onChanged: (bool value) {
                    setState(() {
                      usrData.setSyncAudio(value);
                    });
                  },
                  activeColor: Colors.blueAccent,
                ),
              ),
              ListTile(
                title: Text(
                  'Sync Video',
                  style: TextStyle(
                    fontSize: 15,
                    fontWeight: FontWeight.normal,
                    color: Color.fromRGBO(10,10,10,1),
                  ),
                ),
                trailing: Switch(
                  value: usrData.getSyncVideo(),
                  onChanged: (bool value) {
                    setState(() {
                      usrData.setSyncVideo(value);
                    });
                  },
                  activeColor: Colors.blueAccent,
                ),
              ),
              ListTile(
                title: Text(
                  'Audio Destination',
                  style: TextStyle(
                    fontSize: 15,
                    fontWeight: FontWeight.normal,
                    color: Color.fromRGBO(10,10,10,1),
                  ),
                ),
                trailing: Row(
                  mainAxisSize: MainAxisSize.min,
                  children: <Widget>[
                    Container(
                      padding: EdgeInsets.all(5),
                      height: textFieldSize,
                      width: MediaQuery.of(context).size.width*.35,
                      decoration: BoxDecoration(
                        borderRadius: BorderRadius.all(Radius.circular(3)),
                        color: Colors.white,
                        border: Border.all(
                          width: 1,
                          color: Colors.grey,
                        ),
                      ),
                      child: SingleChildScrollView(
                        scrollDirection: Axis.horizontal,
                        child: Align(
                          alignment: Alignment.centerLeft,
                          child: getAudioDestination()==null ? Container() : Text(getAudioDestination().path),
                        ),
                      ),
                    ),
                    IconButton(
                      icon: Icon(Icons.folder),
                      color: Colors.blueGrey,
                      onPressed: () {
                        _pickDirectory(context).then((directory) {
                          if (directory != null) {
                            setState(() {
                              setAudioDestination(directory);
                            });
                          }
                        });
                      },
                    ),
                  ],
                ),
              ),
              ListTile(
                title: Text(
                  'Video Destination',
                  style: TextStyle(
                    fontSize: 15,
                    fontWeight: FontWeight.normal,
                    color: Color.fromRGBO(10,10,10,1),
                  ),
                ),
                trailing: Row(
                  mainAxisSize: MainAxisSize.min,
                  children: <Widget>[
                    Container(
                      padding: EdgeInsets.all(5),
                      height: textFieldSize,
                      width: MediaQuery.of(context).size.width*.35,
                      decoration: BoxDecoration(
                        borderRadius: BorderRadius.all(Radius.circular(3)),
                        color: Colors.white,
                        border: Border.all(
                          width: 1,
                          color: Colors.grey,
                        ),
                      ),
                      child: SingleChildScrollView(
                        scrollDirection: Axis.horizontal,
                        child: Align(
                          alignment: Alignment.centerLeft,
                          child: getVideoDestination()==null ? Container() : Text(getVideoDestination().path),
                        ),
                      ),
                    ),
                    IconButton(
                      icon: Icon(Icons.folder),
                      color: Colors.blueGrey,
                      onPressed: () {
                        _pickDirectory(context).then((directory) {
                          if (directory != null) {
                            setState(() {
                              setVideoDestination(directory);
                            });
                          }
                        });
                      },
                    ),
                  ],
                ),
              ),
              SizedBox(height: settingsColPadding),
              Divider(thickness: 1),
              SizedBox(height: settingsColPadding),
              Center(
                child: Text(
                  'Playlists',
                  style: TextStyle(
                    color: Color.fromRGBO(10,10,10,1),
                    fontSize: 20,
                    fontWeight: FontWeight.normal,
                  ),
                ),
              ),
              SizedBox(height: settingsColPadding),
              Container(
                padding: EdgeInsets.fromLTRB(20, 10, 0, 10),
                decoration: BoxDecoration(
                  color: Colors.white,
                  border: Border.all(
                    width: 1,
                    color: Colors.grey,
                  ),
                  borderRadius: BorderRadius.all(Radius.circular(5)),
                ),
                child: ListView.builder(
                  padding: EdgeInsets.all(0.0),
                  shrinkWrap: true,
                  physics: const NeverScrollableScrollPhysics(),
                  itemCount: usrPlaylists.length+1,
                  itemBuilder: (context, index) {
                    if (index >= usrPlaylists.length && usrPlaylists.length==usrData.plistLimit) {
                      return Container();
                    }

                    Color buttonColor;
                    IconData icon;
                    String displayText;
                    bool add;

                    if (index < usrPlaylists.length) {
                      buttonColor = Color(0xffFF7E7E);
                      icon = Icons.remove;
                      displayText = usrPlaylists[index];
                      add = false;
                    }else {
                      buttonColor = Color(0xff416DFC);
                      icon = Icons.add;
                      displayText = '';
                      add = true;
                    }

                    return Column(
                      children: [
                        Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: <Widget>[
                            Align(
                              alignment: Alignment.centerLeft,
                              child: Container(
                                height: textFieldSize,
                                width: MediaQuery.of(context).size.width*.58,
                                padding: EdgeInsets.all(5),
                                decoration: BoxDecoration(
                                  borderRadius: BorderRadius.all(Radius.circular(5)),
                                  color: Colors.white,
                                  border: Border.all(
                                    width: 1,
                                    color: Colors.grey,
                                  ),
                                ),

                                child: GestureDetector(
                                  onTap: () {
                                    if (add) {
                                      createAddPlaylistAlertDialog(context).then((link) {
                                        setState(() {
                                          if (urlVerify(url: link,restrict: 'playlist')) {
                                            usrData.addPlaylist(link);
                                          }
                                        });
                                      });
                                    }
                                  },
                                  child: SingleChildScrollView(
                                    scrollDirection: Axis.horizontal,
                                    child: Align(
                                      alignment: Alignment.centerLeft,
                                      child: Text(displayText),
                                    ),
                                  ),
                                ),
                              ),
                            ),
                            Align(
                              alignment: Alignment.centerRight,
                              child: SizedBox(
                                height: MediaQuery.of(context).size.width*0.09,
                                child: RawMaterialButton(
                                  onPressed: () {
                                    if (!add) {
                                      setState(() {
                                        usrData.removePlaylist(usrPlaylists[index]);
                                      });
                                    }else {
                                      createAddPlaylistAlertDialog(context).then((link) {
                                        setState(() {
                                          if (urlVerify(url: link,restrict: 'playlist')) {
                                            usrData.addPlaylist(link);
                                          }
                                        });
                                      });
                                    }
                                  },
                                  child: Icon(icon),
                                  fillColor: buttonColor,
                                  shape: CircleBorder(),
                                ),
                              ),
                            ),
                          ],
                        ),
                        SizedBox(height: index==usrPlaylists.length ? 0 : 10)
                      ],
                    );
                  },
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
