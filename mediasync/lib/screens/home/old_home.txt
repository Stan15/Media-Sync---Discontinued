import 'package:flutter/material.dart';
import 'package:mediasync/main.dart';
import 'package:mediasync/models/user_data.dart';
import 'package:mediasync/services/auth.dart';
import 'package:shared_preferences/shared_preferences.dart';

import 'package:sliding_up_panel/sliding_up_panel.dart';

import 'dart:async';
import 'dart:io';
import 'package:directory_picker/directory_picker.dart';
import 'package:path_provider/path_provider.dart';

import 'package:mediasync/services/database.dart';
import 'package:provider/provider.dart';

class Home extends StatefulWidget {

  @override
  _HomeState createState() => _HomeState();
}

Directory audioDestination;
Directory videoDestination;

bool isProgressing = false;
double progressValue = 0;
Widget progressMessageWidget = Container();

bool findingUnsyncedFiles = false;
int unsyncedCount = 0;

class _HomeState extends State<Home> with TickerProviderStateMixin{

  final AuthService _auth = AuthService();

  Directory _audioDestination = audioDestination;
  Directory _videoDestination = videoDestination;
  bool _isProgressing = isProgressing;
  double _progressValue = progressValue;
  Widget _progressMessageWidget = progressMessageWidget;
  bool _findingUnsyncedFiles = findingUnsyncedFiles;
  int _unsyncedCount = unsyncedCount;

  Timer timer;
  @override
  void initState() {
    super.initState();
    setState(() {
      timer = Timer.periodic(Duration(milliseconds: 300), (Timer t) => updateValues());
      getUnsyncedFiles();
    });
  }

  @override
  void dispose() {
    timer?.cancel();
    super.dispose();
  }

  void updateValues() {
    setState(() {
      _ensureDownloadDestinations();
      _audioDestination = audioDestination;
      _videoDestination = videoDestination;
      _isProgressing = isProgressing;
      _progressValue = progressValue;
      _progressMessageWidget = progressMessageWidget;
      _findingUnsyncedFiles = findingUnsyncedFiles;
      _unsyncedCount = unsyncedCount;
    });
  }

  Future<Directory> _getAudioDestination() async{
    String audioDest = await getPrefValue('audioDest','String');
    Directory returnVal;
    if (audioDest!=null) {
      returnVal = Directory(audioDest);
    }
    return returnVal;
  }
  Future<Directory> _getVideoDestination() async{
    String videoDest = await getPrefValue('videoDest','String');
    Directory returnVal;
    if (videoDest!=null) {
      returnVal = Directory(videoDest);
    }
    return returnVal;
  }

  Future<void> _setAudioDestination(Directory dir) async{
    setPrefValue(key: 'audioDest', value: dir.path);
    audioDestination = dir;
  }
  Future<void> _setVideoDestination(Directory dir) async{
    setPrefValue(key: 'videoDest', value: dir.path);
    videoDestination = dir;
  }
  Future<void> _ensureDownloadDestinations() async{ //If download destinations are not set or no longer exist, set it to the default destination
    Directory _audioDest  = await _getAudioDestination();
    Directory _videoDest  = await _getVideoDestination();

    Directory directory;
    final Directory _rootDir = await getExternalStorageDirectory();
    if (_audioDest==null || !(await _audioDest.exists())) {
      final Directory _audioSaveFolder =  Directory('${_rootDir.path}/MediaSync/Audios');

      if(await _audioSaveFolder.exists()){ //if folder already exists return directory
        directory =  _audioSaveFolder;
      }else{//if folder not exists create folder and then return directory
        final Directory _audioDirNewFolder=await _audioSaveFolder.create(recursive: true);
        directory = _audioDirNewFolder;
      }

      setState(() {
        _audioDestination = directory;
        audioDestination = directory;
        _setAudioDestination(directory);
      });
    }
    if (_videoDest==null || !(await _videoDest.exists())) {
      final Directory _videoSaveFolder =  Directory('${_rootDir.path}/MediaSync/Videos');

      if(await _videoSaveFolder.exists()){ //if folder already exists return directory
        directory =  _videoSaveFolder;
      }else{//if folder not exists create folder and then return directory
        final Directory _videoDirNewFolder=await _videoSaveFolder.create(recursive: true);
        directory = _videoDirNewFolder;
      }
      setState(() {
        videoDestination = directory;
        _videoDestination = directory;
        _setVideoDestination(directory);
      });
    }
  }



  Directory selectedDirectory;

  Future<Directory> _pickDirectory(BuildContext context) async {
    Directory directory = selectedDirectory;
    if (directory == null) {
      directory = await getExternalStorageDirectory();
    }

    return await DirectoryPicker.pick(
        allowFolderCreation: true,
        context: context,
        rootDirectory: directory,
        shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.all(Radius.circular(10))));
  }

  double settingsColPadding = 10;
  double settingsRowPadding = 20;
  double textFieldSize = 40;
  @override
  Widget build(BuildContext context) {
    return StreamProvider<List<userData>>.value(
      value: DatabaseService().userSyncData,
      child: Scaffold(
        extendBodyBehindAppBar: true,
        appBar: AppBar(
          backgroundColor: Colors.transparent,
          elevation: 0.0,
          actions: <Widget>[
            FlatButton.icon(
              icon: Icon(
                Icons.person,
                color: Colors.blueGrey,
              ),
              label: Text(
                'logout',
                style: TextStyle(
                  color: Colors.blueGrey,
                ),
              ),
              onPressed: () async{
                await _auth.signOut();
              },
            ),
          ],
        ),
        body: SlidingUpPanel(
          maxHeight: 0.85*MediaQuery.of(context).size.height,
          minHeight: 70,
          parallaxEnabled: false,
          parallaxOffset: .5,
          borderRadius: BorderRadius.only(topLeft: Radius.circular(10.0), topRight: Radius.circular(10.0)),
          body: Stack(
              children: <Widget>[
                Container(
                  color: Colors.white,
                  child: Center(
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      crossAxisAlignment: CrossAxisAlignment.center,
                      children: <Widget>[
                        Row(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Container(
                              decoration: BoxDecoration(
                                color: Colors.white,
                                borderRadius: BorderRadius.circular(500),
                                boxShadow: [
                                  BoxShadow(
                                    color: Color.fromRGBO(0, 0, 0, .23),
                                    offset: Offset(0, 0),
                                    blurRadius: 6.0,
                                  ),
                                ],
                              ),
                              padding: EdgeInsets.all(8),
                              child: Row(
                                children: <Widget>[
                                  AnimatedContainer(
                                    height: 35,
                                    width: 35,
                                    duration: Duration(milliseconds: 300),
                                    decoration: BoxDecoration(
                                        color: _findingUnsyncedFiles ? Colors.blueAccent: _unsyncedCount!=0 ? Colors.redAccent : Colors.greenAccent,
                                        borderRadius: BorderRadius.circular(500.0)
                                    ),
                                    child: AnimatedSwitcher(  //refresh icon if finding unsynced files, text if number of unsynced files is not 0, check mark if it is
                                      duration: Duration(milliseconds: 300),
                                      child: _findingUnsyncedFiles ? Icon(
                                        Icons.refresh,
                                        size: 25,
                                        color: Colors.white,
                                      ) : _unsyncedCount!=0 ? Center(child: Text(
                                        _unsyncedCount.toString(),
                                        style: TextStyle(
                                          color: Colors.white,
                                          fontWeight: FontWeight.bold,
                                          fontSize: 17,
                                        ),
                                      )) : Icon(
                                        Icons.check,
                                        size: 25,
                                        color: Colors.white,
                                      ),
                                    ),
                                  ),

                                  AnimatedSize(
                                    duration: Duration(milliseconds: 400),
                                    vsync: this,
                                    child: _findingUnsyncedFiles ? Container() : Padding(
                                      padding: const EdgeInsets.all(8.0),
                                      child: Text(
                                        _unsyncedCount==0 ? 'All Done!' : _unsyncedCount.toString() + ' unsynced files',
                                        style: TextStyle(
                                          fontSize: 12,
                                          color: Colors.black,
                                        ),
                                      ),
                                    ),
                                  )
                                ],
                              ),
                            ),
                          ],
                        ),
                        SizedBox(height: 50),
                        Row(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: <Widget>[
                            RaisedButton(
                              onPressed: () {
                                setState(() {
                                  if (!_isProgressing) {
                                    SyncData(usrData);
                                  }
                                });
                              },
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(10.0),
                              ),
                              child: Text(
                                'Sync',
                                style: TextStyle(
                                  color: Colors.white,
                                ),
                              ),
                              color: Colors.blueAccent,
                            ),
                            SizedBox(width: 50),
                            RaisedButton(
                              onPressed: () {
                                if (!_isProgressing) {
                                  createDownloadAlertDialog(context).then((link) {
                                    String format =  link.substring(0,2).trim();
                                    link = link.substring(2).trim();
                                    if (urlVerify(url:link)) {
                                      if (format=='a') {
                                        DownloadMedia(url: link, format: 'audio');
                                      }
                                      else if(format=='v') {
                                        DownloadMedia(url: link, format: 'video');
                                      }
                                    }
                                  });
                                }
                              },
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(10.0),
                              ),
                              child: Text(
                                'Download',
                                style: TextStyle(
                                  color: Colors.white,
                                ),
                              ),
                              color: Colors.blueAccent,
                            ),
                          ],
                        ),
                        SizedBox(height: 25),
                        AnimatedSize(
                          duration: Duration(milliseconds: 400),
                          vsync: this,
                          child: Container(
                            padding: EdgeInsets.all(15),
                            height: _isProgressing ? null : 0.0,
                            width: 300,
                            decoration: BoxDecoration(
                              color: Colors.white,
                              border: Border.all(
                                width: 1,
                                color: Color.fromRGBO(223, 223, 223, 1),
                              ),
                              borderRadius: BorderRadius.all(Radius.circular(10)),
                            ),
                            child: Column(
                              mainAxisAlignment: MainAxisAlignment.start,
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: <Widget>[
                                Text(
                                  'Progress',
                                  style: TextStyle(
                                    fontWeight: FontWeight.w600,
                                    color: Color.fromRGBO(100, 100, 100, 1),
                                    fontSize: 20,
                                  ),
                                ),
                                SizedBox(height: 5),
                                _progressMessageWidget,
                                SizedBox(height: 30),
                                LinearProgressIndicator(
                                  value: _progressValue,
                                )
                              ],
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
                Align(
                  alignment: Alignment.topLeft,
                  child: Padding(
                    padding: const EdgeInsets.symmetric(vertical: 40.0,horizontal: 20.0),
                    child: Text(
                      'Media Sync',
                      style: TextStyle(
                        fontSize: 35,
                        color: Colors.black,
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                  ),
                ),
              ]
          ),
          header: Column(
            children: [
              Container(
                width: MediaQuery.of(context).size.width,
                height: 70,
                padding: EdgeInsets.all(15),
                decoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius: BorderRadius.only(topLeft: Radius.circular(10.0), topRight: Radius.circular(10.0)),
                ),
                child: Column(
                  children: <Widget>[
                    Center(child: Container(
                      height: 5,
                      width: 20,
                      decoration: BoxDecoration(
                        color: Color.fromRGBO(223, 223, 223, 1),
                        borderRadius: BorderRadius.circular(500),
                      ),
                    )),
                    SizedBox(height: 3),
                    Align(
                      alignment: Alignment.center,
                      child: Text(
                        'Settings',
                        style: TextStyle(
                          fontSize: 25,
                          fontWeight: FontWeight.bold,
                          color: Colors.black,
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
          panelBuilder: (ScrollController scrollController) => SingleChildScrollView(
            controller: scrollController,
            child: Container(
              width: MediaQuery.of(context).size.width,
              padding: EdgeInsets.all(20),
              child: Column(
                children: <Widget>[
                  SizedBox(height: 45),
                  Divider(thickness: 1),
                  ListTile(
                    title: Text(
                      'Sync Audio',
                      style: TextStyle(
                        fontSize: 15,
                        fontWeight: FontWeight.normal,
                        color: Color.fromRGBO(10,10,10,1),
                      ),
                    ),
                    trailing: Switch(
                      value: usrData.getSyncAudio(),
                      onChanged: (bool value) {
                        setState(() {
                          usrData.setSyncAudio(value);
                        });
                      },
                      activeColor: Colors.blueAccent,
                    ),
                  ),
                  ListTile(
                    title: Text(
                      'Sync Video',
                      style: TextStyle(
                        fontSize: 15,
                        fontWeight: FontWeight.normal,
                        color: Color.fromRGBO(10,10,10,1),
                      ),
                    ),
                    trailing: Switch(
                      value: usrData.getSyncVideo(),
                      onChanged: (bool value) {
                        setState(() {
                          usrData.setSyncVideo(value);
                        });
                      },
                      activeColor: Colors.blueAccent,
                    ),
                  ),
                  ListTile(
                    title: Text(
                      'Audio Destination',
                      style: TextStyle(
                        fontSize: 15,
                        fontWeight: FontWeight.normal,
                        color: Color.fromRGBO(10,10,10,1),
                      ),
                    ),
                    trailing: Row(
                      mainAxisSize: MainAxisSize.min,
                      children: <Widget>[
                        Container(
                          padding: EdgeInsets.all(5),
                          height: textFieldSize,
                          width: MediaQuery.of(context).size.width*.35,
                          decoration: BoxDecoration(
                            borderRadius: BorderRadius.all(Radius.circular(3)),
                            color: Colors.white,
                            border: Border.all(
                              width: 1,
                              color: Colors.grey,
                            ),
                          ),
                          child: SingleChildScrollView(
                            scrollDirection: Axis.horizontal,
                            child: Align(
                              alignment: Alignment.centerLeft,
                              child: _audioDestination==null ? Container() : Text(_audioDestination.path),
                            ),
                          ),
                        ),
                        IconButton(
                          icon: Icon(Icons.folder),
                          color: Colors.blueGrey,
                          onPressed: () {
                            _pickDirectory(context).then((directory) {
                              if (directory != null) {
                                setState(() {
                                  _setAudioDestination(directory);
                                });
                              }
                            });
                          },
                        ),
                      ],
                    ),
                  ),
                  ListTile(
                    title: Text(
                      'Video Destination',
                      style: TextStyle(
                        fontSize: 15,
                        fontWeight: FontWeight.normal,
                        color: Color.fromRGBO(10,10,10,1),
                      ),
                    ),
                    trailing: Row(
                      mainAxisSize: MainAxisSize.min,
                      children: <Widget>[
                        Container(
                          padding: EdgeInsets.all(5),
                          height: textFieldSize,
                          width: MediaQuery.of(context).size.width*.35,
                          decoration: BoxDecoration(
                            borderRadius: BorderRadius.all(Radius.circular(3)),
                            color: Colors.white,
                            border: Border.all(
                              width: 1,
                              color: Colors.grey,
                            ),
                          ),
                          child: SingleChildScrollView(
                            scrollDirection: Axis.horizontal,
                            child: Align(
                              alignment: Alignment.centerLeft,
                              child: _videoDestination==null ? Container() : Text(_videoDestination.path),
                            ),
                          ),
                        ),
                        IconButton(
                          icon: Icon(Icons.folder),
                          color: Colors.blueGrey,
                          onPressed: () {
                            _pickDirectory(context).then((directory) {
                              if (directory != null) {
                                setState(() {
                                  _setVideoDestination(directory);
                                });
                              }
                            });
                          },
                        ),
                      ],
                    ),
                  ),
                  SizedBox(height: settingsColPadding),
                  Divider(thickness: 1),
                  SizedBox(height: settingsColPadding),
                  Center(
                    child: Text(
                      'Playlists',
                      style: TextStyle(
                        color: Color.fromRGBO(10,10,10,1),
                        fontSize: 20,
                        fontWeight: FontWeight.normal,
                      ),
                    ),
                  ),
                  SizedBox(height: settingsColPadding),
                  Container(
                    padding: EdgeInsets.fromLTRB(20, 10, 0, 10),
                    decoration: BoxDecoration(
                      color: Colors.white,
                      border: Border.all(
                        width: 1,
                        color: Colors.grey,
                      ),
                      borderRadius: BorderRadius.all(Radius.circular(5)),
                    ),
                    child: ListView.builder(
                      padding: EdgeInsets.all(0.0),
                      shrinkWrap: true,
                      physics: const NeverScrollableScrollPhysics(),
                      itemCount: usrPlaylists.length+1,
                      itemBuilder: (context, index) {
                        if (index >= usrPlaylists.length && usrPlaylists.length==usrData.plistLimit) {
                          return Container();
                        }

                        Color buttonColor;
                        IconData icon;
                        String displayText;
                        bool add;

                        if (index < usrPlaylists.length) {
                          buttonColor = Color(0xffFF7E7E);
                          icon = Icons.remove;
                          displayText = usrPlaylists[index];
                          add = false;
                        }else {
                          buttonColor = Color(0xff416DFC);
                          icon = Icons.add;
                          displayText = '';
                          add = true;
                        }

                        return Column(
                          children: [
                            Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              children: <Widget>[
                                Align(
                                  alignment: Alignment.centerLeft,
                                  child: Container(
                                    height: textFieldSize,
                                    width: MediaQuery.of(context).size.width*.58,
                                    padding: EdgeInsets.all(5),
                                    decoration: BoxDecoration(
                                      borderRadius: BorderRadius.all(Radius.circular(5)),
                                      color: Colors.white,
                                      border: Border.all(
                                        width: 1,
                                        color: Colors.grey,
                                      ),
                                    ),

                                    child: GestureDetector(
                                      onTap: () {
                                        if (add) {
                                          createAddPlaylistAlertDialog(context).then((link) {
                                            setState(() {
                                              if (urlVerify(url: link,restrict: 'playlist')) {
                                                usrData.addPlaylist(link);
                                              }
                                            });
                                          });
                                        }
                                      },
                                      child: SingleChildScrollView(
                                        scrollDirection: Axis.horizontal,
                                        child: Align(
                                          alignment: Alignment.centerLeft,
                                          child: Text(displayText),
                                        ),
                                      ),
                                    ),
                                  ),
                                ),
                                Align(
                                  alignment: Alignment.centerRight,
                                  child: SizedBox(
                                    height: MediaQuery.of(context).size.width*0.09,
                                    child: RawMaterialButton(
                                      onPressed: () {
                                        if (!add) {
                                          setState(() {
                                            usrData.removePlaylist(usrPlaylists[index]);
                                          });
                                        }else {
                                          createAddPlaylistAlertDialog(context).then((link) {
                                            setState(() {
                                              if (urlVerify(url: link,restrict: 'playlist')) {
                                                usrData.addPlaylist(link);
                                              }
                                            });
                                          });
                                        }
                                      },
                                      child: Icon(icon),
                                      fillColor: buttonColor,
                                      shape: CircleBorder(),
                                    ),
                                  ),
                                ),
                              ],
                            ),
                            SizedBox(height: index==usrPlaylists.length ? 0 : 10)
                          ],
                        );
                      },
                    ),
                  ),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }
}


Widget progressMessageDownloading(fileName) {
  return Row(
    children: <Widget>[
      Icon(
        Icons.file_download,
        color: Color.fromRGBO(0, 0, 0, 0.4),
        size: 13,
      ),
      Text(
        fileName,
        style: TextStyle(
          color: Color.fromRGBO(0, 0, 0, 0.4),
          fontWeight: FontWeight.bold,
          fontSize: 12,
        ),
      ),
    ],
  );
}

Widget progressMessageSearching() {
  return Row(
    children: <Widget>[
      Icon(
        Icons.search,
        color: Color.fromRGBO(0, 0, 0, 0.4),
        size: 13,
      ),
      Text(
        'Searching for un-synced files',
        style: TextStyle(
          color: Color.fromRGBO(0, 0, 0, 0.4),
          fontWeight: FontWeight.bold,
          fontSize: 12,
        ),
      ),
    ],
  );
}


Future setPrefValue({String key, value}) async{
  SharedPreferences prefs = await SharedPreferences.getInstance();
  switch (value.runtimeType) {
    case int: {
      prefs.setInt(key, value);
      break;
    }
    case String: {
      prefs.setString(key, value);
      break;
    }
    case bool: {
      prefs.setBool(key, value);
      break;
    }
    case double: {
      prefs.setDouble(key, value);
      break;
    }
  }
  return value;
}
Future getPrefValue(String key,String typeOf) async {
  SharedPreferences prefs = await SharedPreferences.getInstance();
  switch (typeOf) {
    case 'int': {
      return prefs.getInt(key);
    }
    case 'String': {
      return prefs.getString(key);
    }
    case 'bool': {
      return prefs.getBool(key);
    }
    case 'double': {
      return prefs.getDouble(key);
    }
  }
}

bool urlVerify({String url, String restrict}) {
  bool verified;
  if (restrict == null) {
    verified =  url.trim().isNotEmpty && url!=null;
  }else {
    if (restrict=='playlist') {
      bool isPlaylist = true;
      verified = url.trim().isNotEmpty && url!=null && isPlaylist;
    }else if (restrict=='video') {
      bool isVideo = true;
      verified = url.trim().isNotEmpty && url!=null && isVideo;
    }
  }
  return verified;
}

class UserData {
  int plistLimit = 4;
  bool syncAudio = true;
  bool syncVideo = false;
  List<String> playlists = [];

  bool getSyncAudio() {
    return this.syncAudio;
  }

  bool getSyncVideo() {
    return this.syncVideo;
  }

  void setSyncAudio(bool) {
    this.syncAudio = bool;
  }

  void setSyncVideo(bool) {
    this.syncVideo = bool;
  }

  List<String> getPlaylists() {
    return this.playlists;
  }

  void addPlaylist(url) {
    this.playlists.add(url);
  }

  void removePlaylist(url) {
    this.playlists.remove(url);
  }
}

void SyncData(usrData) {
  isProgressing = !isProgressing;
  progressValue = null;
  progressMessageWidget = progressMessageSearching();
  List<String> unsyncedFiles = getUnsyncedFiles();

  Timer(Duration(seconds: 3), () {
    progressValue = .3;
    DownloadMedia(url: 'http://void', format: 'audio');
  });
  Timer(Duration(seconds: 5), () {
    isProgressing = false;
    progressValue = 0;
  });
}

void DownloadMedia({String url, String format}) {
  print(format + ' - ' + url);
  isProgressing = true;
  progressValue = .5;
  String fileExtension;

  String fileName = 'sample';

  if (format=='video') {
    fileExtension = '.mp4';
  }else {
    fileExtension = '.mp3';
  }
  progressMessageWidget = progressMessageDownloading(fileName+fileExtension);

  Timer(Duration(seconds: 5), () {
    isProgressing = false;
    progressValue = 0;
  });

}

List<String> getUnsyncedFiles() {
  findingUnsyncedFiles = true;
  List<String> unsyncedFiles = <String>['shshshsh','ase bg','dkd','susiw','ao','eidndk'];

  unsyncedCount = unsyncedFiles.length;

  Timer(Duration(seconds: 3), () {
    findingUnsyncedFiles = false;
  });

  return unsyncedFiles;
}

